{"at":"2025-10-25T20:14:34.759562","root":".","tree":[".","\u251c\u2500\u2500 audio_out/","\u251c\u2500\u2500 clients/ (4 files)","\u251c\u2500\u2500 core/ (6 files)","\u251c\u2500\u2500 examples/ (1 files)","\u251c\u2500\u2500 htmlcov/ (55 files)","\u251c\u2500\u2500 narration_scripts/ (23 files)","\u251c\u2500\u2500 processors/ (3 files)","\u251c\u2500\u2500 storage/ (3 files)","\u251c\u2500\u2500 tests/ (12 files)","\u2502   \u2514\u2500\u2500 fixtures/","\u251c\u2500\u2500 utils/ (1 files)","\u251c\u2500\u2500 voice_processing_presets/ (7 files)","\u251c\u2500\u2500 pyproject.toml","\u2514\u2500\u2500 README.md"],"stats":{"total_files":125,"total_directories":13,"fully_parsed":{"python":37,"javascript":7},"listed_only":{"json":34,"html":45,"css":2},"markdown_files":8},"f":{"trim_audio.py":["p",["trim_silence:15:(audio_path, output_path, silence_threshold=-50.0, chunk_size=10)::","main:62:():trim_silence:"]],"narration_generator.py":["p",["main:22:():run:"],{"AudioGenerator":["35",["__init__:36:(self, metadata_file, xi_api_key, voice_id, openai_api_key):create_exhale_audio_files_mapping,create_inhale_audio_files_mapping,create_pedalboard,ensure_directory_exists,load_metadata,lower_nospace:","load_metadata:49:(file_path)::","ensure_directory_exists:54:(path)::","lower_nospace:62:(s)::","create_inhale_audio_files_mapping:66:()::","create_exhale_audio_files_mapping:76:()::","load_and_print_presets:85:(self):print_preset,read_preset,set_parameters:","read_preset:105:(file_path)::","print_preset:110:(file_path, preset_data)::","set_parameters:115:(file_path, preset_data)::","shorten_text:120:(self, original_text, current_length, target_length)::","pad_audio:161:(self, segment, target_length)::","save_metadata:172:(metadata, filename)::","generate_and_process_audio:176:(self, fragment, previous_text, next_text, suffix=\"\")::","process_paragraph:210:(self, paragraph, paragraph_index, section_key, apply_effect_chain=True):apply_effects_chain,generate_and_process_audio,lower_nospace,pad_audio,shorten_text:","process_section:311:(self, section_key, section_value, apply_effect_chain=True):process_paragraph:","process_metadata:327:(self):create_breath_cycle,lower_nospace,process_section,save_metadata:","create_breath_cycle:350:(self, section_value, stitched_segments, section_key):lower_nospace:","create_pedalboard:439:(self)::","apply_effects_chain:463:(self, audio_segment)::","run:489:(self):process_metadata:"]]}],"airscript_editor.py":["p",{"AirscriptEditorApp":["19",["__init__:20:(self):__init__,create_buttons,create_widgets,load_json_files:","load_json_files:62:(self, paths)::","save_to_excel:78:(self):refresh_data_from_ui:","write_back_to_json:83:(self):refresh_data_from_ui:","undo_changes:100:(self):create_widgets:","update_data:104:(self, index, field, value)::","refresh_data_from_ui:107:(self):update_data:","create_widgets:117:(self):update_data:","create_buttons:168:(self):create_widgets,load_json_files:"]]}],"api.py":["p",["generate_narration:33:(input_json:Union[str, Path], output_dir:Union[str, Path] = \"audio_out\", cache_dir:Optional[Union[str, Path]] = \".audio_cache\", api_key:Optional[str] = None, voice_id:Optional[str] = None, verbose:bool = False,)>GenerationResult:generate_narration:"]],"trim_audio_utils.py":["p",["round_down_to_previous_second:6:(ms)::","round_up_to_next_second:9:(ms)::","pad_to_nearest_second:12:(audio):round_up_to_next_second:"]],"parse_xml_preset.py":["p",["main:21:():run:"],{"AudioGenerator":["34",["__init__:35:(self, metadata_file, xi_api_key, voice_id, openai_api_key):create_exhale_audio_files_mapping,create_inhale_audio_files_mapping,create_pedalboard,ensure_directory_exists,load_metadata,lower_nospace:","load_metadata:48:(file_path)::","ensure_directory_exists:53:(path)::","lower_nospace:61:(s)::","create_inhale_audio_files_mapping:65:()::","create_exhale_audio_files_mapping:75:()::","shorten_text:84:(self, original_text, current_length, target_length)::","pad_audio:106:(self, segment, target_length)::","save_metadata:117:(metadata, filename)::","generate_and_process_audio:121:(self, fragment, previous_text, next_text, suffix=\"\")::","process_paragraph:155:(self, paragraph, paragraph_index, section_key, apply_effect_chain=True):apply_effects_chain,generate_and_process_audio,lower_nospace,pad_audio,shorten_text:","process_section:233:(self, section_key, section_value, apply_effect_chain=True):process_paragraph:","process_metadata:249:(self):create_breath_cycle,generate_requirements_document,lower_nospace,process_section,save_metadata:","create_breath_cycle:274:(self, section_value, stitched_segments, section_key):lower_nospace:","generate_requirements_document:356:(self, overall_metadata)::","create_pedalboard:432:(self)::","apply_effects_chain:456:(self, audio_segment)::","run:482:(self):process_metadata:"]]}],"__main__.py":["p",["main:31:()>int::Main CLI entry point."]],"clients/cache.py":["p",{"AudioCache":["18",["__init__:28:(self, cache_dir:Path, ttl_days:int = 30)::","_compute_key:41:(self, text:str, previous_text:Optional[str], next_text:Optional[str], voice_config:dict)>str::","get:69:(self, text:str, previous_text:Optional[str], next_text:Optional[str], voice_config:dict)>Optional[AudioSegment]:_compute_key,_delete_entry,get:","set:121:(self, text:str, previous_text:Optional[str], next_text:Optional[str], voice_config:dict, audio:AudioSegment)>None:_compute_key:","_delete_entry:161:(self, cache_key:str)>None::Delete cache entry (both audio and metadata).","clear:171:(self)>int:_delete_entry:","prune_expired:187:(self)>int:_delete_entry,get:","get_stats:216:(self)>dict::"]]}],"clients/elevenlabs.py":["p",{"ElevenLabsClient":["32",["__init__:59:(self, api_key:str, voice_id:str, model:str = \"eleven_multilingual_v2\", stability:float = 0.6, similarity_boost:float = 0.7, style:float = 0.15, use_speaker_boost:bool = True, cache_dir:Optional[Path] = None, cache_ttl_days:int = 30, max_retries:int = 3, retry_backoff_factor:float = 2.0)::","generate_audio:105:(self, text:str, previous_text:Optional[str] = None, next_text:Optional[str] = None)>AudioSegment:_call_api_with_retry,_get_voice_config_dict:","_call_api_with_retry:147:(self, text:str, previous_text:Optional[str], next_text:Optional[str])>AudioSegment:_call_api:Call API with exponential backoff retry logic.","_call_api:182:(self, text:str, previous_text:Optional[str], next_text:Optional[str])>AudioSegment::Make actual API call to ElevenLabs.","estimate_cost:236:(self, text:str)>float::","_get_voice_config_dict:249:(self)>dict::Get voice configuration as dictionary (for cache key computation).","get_stats:260:(self)>dict:get_stats:"]]}],"clients/base.py":["p",{"TTSClient":["9",["generate_audio:18:(self, text:str, previous_text:Optional[str] = None, next_text:Optional[str] = None)>AudioSegment::","estimate_cost:36:(self, text:str)>float::"]]}],"core/validator.py":["p",{"NarrationValidator":["23",["__init__:41:(self)::Initialize validator.","validate:46:(self, script:NarrationScript)>ValidationResult:_validate_exercise_duration,_validate_segments,_validate_timing_feasibility:","_validate_exercise_duration:73:(self, script:NarrationScript)>None::Check exercise duration is reasonable.","_validate_segments:93:(self, script:NarrationScript)>None:_validate_audio_config,_validate_breathing_pattern:Validate individual segments.","_validate_breathing_pattern:110:(self, segment:Segment, idx:int)>None::Validate breathing pattern timing.","_validate_audio_config:148:(self, segment:Segment, idx:int)>None::Validate audio configuration.","_validate_timing_feasibility:176:(self, script:NarrationScript)>None::Check if audio will fit in breathing cycles."]]}],"core/models.py":["p",{"Exercise":["20",["validate_id_format:32:(cls, v:str)>str::Ensure ID is URL-safe (lowercase, hyphens, no spaces)."]],"AudioConfig":["39",["validate_fragments_not_empty:52:(cls, v:List[str])>List[str]::Ensure no empty fragments."]],"BreathingPattern":["59",["validate_pattern_or_explicit:74:(self)::Ensure either pattern OR explicit inhale/exhale/duration specified.","get_total_cycle_duration_ms:97:(self)>int::Calculate total duration of one breath cycle."]],"Segment":["112",["validate_breathing_for_type:121:(self)::Ensure breathing_cycle segments have breathing config."]],"VoiceConfig":["128",[]],"NarrationScript":["140",["from_file:150:(cls, path:Union[str, Path])>\"NarrationScript\"::","to_file:174:(self, path:Union[str, Path])>None::","estimate_total_duration_ms:187:(self)>int:get_total_cycle_duration_ms:"]]}],"core/results.py":["p",{"ValidationResult":["9",[]],"CostEstimate":["27",[]],"SegmentResult":["40",[]],"GenerationResult":["54",["total_duration_seconds:67:(self)>float::Total duration in seconds.","cache_hit_rate:72:(self)>float::Cache hit rate percentage."]]}],"core/generator.py":["p",{"VoiceNarrationGenerator":["34",["__init__:63:(self, tts_client:TTSClient, storage:Storage, audio_processor:Optional[AudioProcessor] = None, validator:Optional[NarrationValidator] = None, verbose:bool = False,)::","validate:85:(self, script:NarrationScript)>ValidationResult:validate:","estimate_cost:98:(self, script:NarrationScript)>CostEstimate:estimate_cost:","generate:121:(self, script:NarrationScript)>GenerationResult:_process_segment,validate:","_process_segment:199:(self, segment:Segment, index:int, output_dir:Path)>SegmentResult::"]]}],"core/exceptions.py":["p",{"VoiceGenerationError":["6",[]],"ValidationError":["11",["__init__:14:(self, errors:List[str], message:Optional[str] = None):__init__:"]],"SegmentProcessingError":["23",["__init__:26:(self, segment_id:str, index:int, original_error:Optional[Exception] = None):__init__:"]],"TTSError":["38",["__init__:41:(self, message:str, status_code:Optional[int] = None, response_text:Optional[str] = None):__init__:"]],"StorageError":["54",[]],"CacheError":["59",[]]}],"t/conftest.py":["p",["sample_exercise:34:()>Exercise::Sample exercise metadata for testing.","sample_audio_config:47:()>AudioConfig::Sample audio configuration for narration segment.","sample_breathing_pattern:56:()>BreathingPattern::Sample breathing pattern for breathing cycle segment.","sample_narration_segment:66:(sample_audio_config:AudioConfig)>Segment::Sample narration-type segment.","sample_breathing_segment:79:(sample_breathing_pattern:BreathingPattern, sample_audio_config:AudioConfig,)>Segment::Sample breathing_cycle-type segment.","sample_voice_config:95:()>VoiceConfig::Sample voice configuration.","sample_narration_script:112:(sample_exercise:Exercise, sample_narration_segment:Segment, sample_breathing_segment:Segment, sample_voice_config:VoiceConfig,)>NarrationScript::Complete sample narration script with all components.","sample_script_dict:127:(sample_exercise:Exercise, sample_narration_segment:Segment, sample_breathing_segment:Segment, sample_voice_config:VoiceConfig,)>Dict[str, Any]::Sample narration script as dictionary (for JSON testing).","sample_audio:145:()>AudioSegment::1-second silent audio segment for testing.","sample_audio_2s:151:()>AudioSegment::2-second silent audio segment for testing.","sample_audio_500ms:157:()>AudioSegment::500ms silent audio segment for testing.","sample_audio_list:163:()>list[AudioSegment]::List of audio segments for stitching tests.","mock_tts_client:178:()>Mock:estimate_cost_side_effect:Mocked TTS client that returns 2-second audio for any input.","mock_tts_client_with_stats:201:()>Mock:generate_side_effect:Mocked TTS client with realistic statistics tracking.","temp_storage:229:()>FileSystemStorage::Temporary filesystem storage using system temp directory.","temp_output_dir:238:()>Path::Temporary output directory for test files.","sample_json_file:251:(sample_script_dict:Dict[str, Any], tmp_path:Path)>Path::Temporary JSON file containing sample narration script.","invalid_json_file:400:(tmp_path:Path)>Path::Invalid JSON file for error testing.","malformed_json_file:269:(tmp_path:Path)>Path::Temporary file with malformed JSON syntax.","temp_cache_dir:283:(tmp_path:Path)>Path::Temporary cache directory for testing.","mock_env_vars:296:(monkeypatch)::Mock environment variables for testing.","missing_env_vars:307:(monkeypatch)::Remove environment variables to test error handling.","simple_script:314:(sample_exercise:Exercise)>NarrationScript::Simple narration script with 2 segments for testing.","generator_with_mocks:340:(mock_tts_client:Mock, temp_storage:FileSystemStorage)::VoiceNarrationGenerator with mocked TTS client and temp storage.","simple_script_json:352:(tmp_path:Path, simple_script:NarrationScript)>Path::Simple narration script saved as JSON file.","simple_script_json_no_voice:360:(tmp_path:Path, sample_exercise:Exercise)>Path::Narration script JSON with no voice_id in voice_config.","script_with_voice_json:380:(tmp_path:Path, sample_exercise:Exercise)>Path::Narration script JSON with voice_id specified."]],"t/test_generator.py":["p",{"TestGeneratorInitialization":["33",["test_init_with_required_params:36:(self, mock_tts_client, temp_storage)::Test initializing generator with required parameters only.","test_init_with_custom_components:49:(self, mock_tts_client, temp_storage)::Test initializing generator with custom audio processor and validator."]],"TestGeneratorValidation":["75",["test_validate_valid_script:78:(self, generator_with_mocks, simple_script)::Test validating a valid script.","test_validate_invalid_script:86:(self, generator_with_mocks)::Test validating an invalid script (exercise duration too long)."]],"TestCostEstimation":["118",["test_estimate_cost:121:(self, generator_with_mocks, simple_script)::Test estimating cost for a script.","test_estimate_cost_matches_fragment_length:130:(self, generator_with_mocks)::Test cost estimation calculates correct character count."]],"TestSegmentProcessing":["156",["test_process_segment_single_fragment:159:(self, generator_with_mocks, tmp_path, sample_audio)::Test processing segment with single fragment.","test_process_segment_multiple_fragments:185:(self, generator_with_mocks, tmp_path, sample_audio)::Test processing segment with multiple fragments (stitching).","test_process_segment_with_context:205:(self, generator_with_mocks, tmp_path, sample_audio)::Test segment processing passes context to TTS.","test_process_segment_tts_failure_raises_error:231:(self, generator_with_mocks, tmp_path)::Test TTS failure raises TTSError."]],"TestFullGenerationWorkflow":["256",["test_generate_simple_script:259:(self, generator_with_mocks, simple_script, sample_audio)::Test generating audio for simple valid script.","test_generate_creates_output_directory:273:(self, generator_with_mocks, simple_script, sample_audio)::Test generation creates exercise directory.","test_generate_writes_metadata:283:(self, generator_with_mocks, simple_script, sample_audio)::Test generation writes metadata JSON.","test_generate_writes_audio_files:299:(self, generator_with_mocks, simple_script, sample_audio)::Test generation writes WAV audio files.","test_generate_tracks_cache_statistics:313:(self, generator_with_mocks, simple_script, sample_audio)::Test generation tracks TTS cache statistics."]],"TestGeneratorErrorHandling":["331",["test_generate_invalid_script_raises_validation_error:334:(self, generator_with_mocks)::Test generating invalid script raises ValidationError.","test_generate_segment_failure_raises_processing_error:359:(self, generator_with_mocks, simple_script)::Test segment processing failure raises SegmentProcessingError.","test_generate_logs_warnings:372:(self, generator_with_mocks, sample_audio, caplog)::Test generation logs validation warnings."]],"TestComponentIntegration":["401",["test_generate_calls_audio_processor_methods:404:(self, generator_with_mocks, simple_script, sample_audio):stitch_spy:Test generation calls audio processor trim/pad/stitch methods.","stitch_spy:413:(segments)::","test_generate_calls_metadata_builder:424:(self, generator_with_mocks, simple_script, sample_audio)::Test generation calls MetadataBuilder to create metadata.","test_generate_uses_storage_for_all_io:435:(self, generator_with_mocks, simple_script, sample_audio)::Test generation uses storage abstraction for all I/O."]],"TestStatisticsAndReporting":["452",["test_generate_result_includes_all_statistics:455:(self, generator_with_mocks, simple_script, sample_audio)::Test GenerationResult includes all expected statistics.","test_generate_result_total_duration_matches_segments:473:(self, generator_with_mocks, simple_script, sample_audio)::Test total duration equals sum of segment durations."]]}],"t/test_metadata.py":["p",{"TestAudioGuideMapping":["27",["test_exact_match:30:(self)::Test exact duration match returns correct audio file.","test_closest_match_within_tolerance:41:(self)::Test closest match within 2s tolerance.","test_no_match_beyond_tolerance:57:(self)::Test no match returned if beyond 2s tolerance.","test_zero_duration_returns_none:67:(self)::Test zero duration returns None.","test_empty_audio_map_returns_none:73:(self)::Test empty audio map returns None."]],"TestBreathingGuidesConfiguration":["84",["test_structured_breathing_creates_guides:87:(self)::Test structured breathing pattern creates audio guides.","test_natural_breathing_no_guides:112:(self)::Test natural breathing pattern creates no audio guides.","test_only_inhale_guide:122:(self)::Test breathing with only inhale creates only inhale guide.","test_only_exhale_guide:136:(self)::Test breathing with only exhale creates only exhale guide."]],"TestVoiceConfiguration":["156",["test_create_voices_config:159:(self, tmp_path)::Test creating voice configuration from segment result."]],"TestBreathCycleCreation":["191",["test_create_breath_cycle_structured:194:(self, tmp_path)::Test creating breath cycle with structured breathing.","test_create_breath_cycle_natural:244:(self, tmp_path)::Test creating breath cycle with natural breathing."]],"TestSegmentMetadata":["285",["test_build_segments_metadata:288:(self, tmp_path)::Test building segment metadata from results.","test_build_segments_metadata_with_shortening:330:(self, tmp_path)::Test segment metadata includes text shortening info."]],"TestCompleteMetadataBuilding":["358",["test_build_metadata_complete:361:(self, tmp_path)::Test building complete metadata structure.","test_build_metadata_skips_narration_only:431:(self, tmp_path)::Test narration-only segments (no breathing) are skipped in breath_cycles.","test_build_metadata_missing_segment_result:468:(self, tmp_path)::Test metadata building handles missing segment results gracefully."]]}],"t/test_tts_client.py":["p",{"TestClientInitialization":["31",["test_init_without_cache:34:(self)::Test initializing client without caching.","test_init_with_cache:47:(self, temp_cache_dir)::Test initializing client with caching enabled.","test_init_custom_parameters:58:(self)::Test initializing client with custom voice parameters."]],"TestAudioGeneration":["82",["test_generate_audio_success:86:(self, mock_post, sample_audio)::Test successful audio generation.","test_generate_audio_with_context:103:(self, mock_post, sample_audio)::Test audio generation with previous/next text context.","test_generate_audio_api_error_raises_exception:123:(self, mock_post)::Test API error raises TTSError."]],"TestCaching":["143",["test_cache_miss_then_hit:147:(self, mock_post, temp_cache_dir, sample_audio)::Test cache miss followed by cache hit.","test_cache_different_text_separate_entries:176:(self, mock_post, temp_cache_dir, sample_audio)::Test different text creates separate cache entries.","test_no_cache_always_calls_api:197:(self, mock_post, sample_audio)::Test without cache, API is always called."]],"TestRetryLogic":["224",["test_retry_on_failure_then_success:229:(self, mock_sleep, mock_post, sample_audio)::Test retry logic: fail twice, succeed on third try.","test_max_retries_exceeded_raises_error:257:(self, mock_post)::Test max retries exceeded raises TTSError."]],"TestStatistics":["281",["test_statistics_tracking:285:(self, mock_post, sample_audio)::Test statistics are tracked correctly.","test_get_cache_stats:300:(self, temp_cache_dir)::Test getting cache statistics."]],"TestCostEstimation":["324",["test_estimate_cost:327:(self)::Test cost estimation based on character count.","test_estimate_cost_fractional:337:(self)::Test cost estimation for fractional amounts."]],"TestAudioCache":["353",["test_cache_set_and_get:356:(self, temp_cache_dir, sample_audio)::Test setting and getting cached audio.","test_cache_miss_returns_none:380:(self, temp_cache_dir)::Test cache miss returns None.","test_cache_different_context_different_key:393:(self, temp_cache_dir, sample_audio)::Test different context creates different cache keys."]],"TestTTSClientIntegration":["411",["test_complete_workflow_with_cache:415:(self, mock_post, temp_cache_dir, sample_audio)::Test complete workflow: generate, cache, retrieve."]]}],"t/test_storage.py":["p",{"TestDirectoryManagement":["27",["test_init_creates_base_dir:30:(self, tmp_path)::Test initialization creates base directory.","test_create_exercise_dir:39:(self, temp_storage)::Test creating exercise directory.","test_create_exercise_dir_idempotent:47:(self, temp_storage)::Test creating same exercise directory twice is safe.","test_get_exercise_dir:55:(self, temp_storage)::Test getting exercise directory path (without creating it)."]],"TestAudioWriting":["68",["test_write_audio_wav:71:(self, temp_storage, sample_audio)::Test writing audio as WAV file.","test_write_audio_creates_parent_dirs:84:(self, temp_storage, sample_audio)::Test writing audio creates parent directories if needed.","test_write_audio_invalid_path_raises_error:92:(self, temp_storage, sample_audio)::Test writing to invalid path raises StorageError."]],"TestJSONWriting":["104",["test_write_json:107:(self, temp_storage)::Test writing JSON data to file.","test_write_json_creates_parent_dirs:122:(self, temp_storage)::Test writing JSON creates parent directories.","test_write_json_non_serializable_raises_error:130:(self, temp_storage)::Test writing non-JSON-serializable data raises StorageError."]],"TestJSONReading":["150",["test_read_json:153:(self, temp_storage)::Test reading JSON data from file.","test_read_json_file_not_found:165:(self, temp_storage)::Test reading non-existent JSON file raises FileNotFoundError.","test_read_json_invalid_json_raises_error:170:(self, temp_storage)::Test reading malformed JSON raises StorageError."]],"TestFileOperations":["188",["test_exists_returns_true_for_existing_file:191:(self, temp_storage)::Test exists() returns True for existing file.","test_exists_returns_false_for_nonexistent_file:198:(self, temp_storage)::Test exists() returns False for nonexistent file.","test_list_files:202:(self, temp_storage)::Test listing files in directory.","test_list_files_with_pattern:213:(self, temp_storage)::Test listing files with glob pattern.","test_list_files_directory_not_exist_raises_error:223:(self, temp_storage)::Test listing files in nonexistent directory raises StorageError.","test_list_files_path_is_file_raises_error:229:(self, temp_storage)::Test listing files on a file (not directory) raises StorageError."]],"TestExerciseDeletion":["244",["test_delete_exercise:247:(self, temp_storage)::Test deleting exercise directory.","test_delete_exercise_nonexistent_is_safe:259:(self, temp_storage)::Test deleting nonexistent exercise is safe (no error)."]],"TestStorageIntegration":["270",["test_complete_workflow:273:(self, temp_storage, sample_audio)::Test complete workflow: create dir, write files, read back."]]}],"t/test_validator.py":["p",{"TestExerciseDurationValidation":["29",["test_valid_exercise_duration:32:(self)::Test exercise with reasonable duration passes validation.","test_exercise_duration_too_long:48:(self)::Test exercise exceeding 1 hour (3600s) raises error.","test_exercise_duration_mismatch_warning:65:(self)::Test warning when specified duration doesn't match estimated duration."]],"TestSegmentValidation":["88",["test_duplicate_segment_ids_error:91:(self)::Test duplicate segment IDs raise validation error.","test_unique_segment_ids_pass:107:(self)::Test unique segment IDs pass validation."]],"TestBreathingPatternValidation":["127",["test_breathing_cycle_too_short_error:130:(self)::Test breathing cycle < 1s (1000ms) raises error.","test_breathing_cycle_very_long_warning:145:(self)::Test breathing cycle > 60s (60000ms) raises warning.","test_high_repetitions_warning:161:(self)::Test breathing pattern with > 100 repetitions raises warning."]],"TestAudioConfigValidation":["183",["test_many_fragments_warning:186:(self)::Test > 20 audio fragments raises warning.","test_long_total_text_warning:203:(self)::Test > 1000 chars total text raises warning.","test_long_individual_fragment_warning:220:(self)::Test > 500 chars in single fragment raises warning."]],"TestTimingFeasibility":["242",["test_audio_fits_in_max_duration:245:(self)::Test audio that fits in max_duration passes validation.","test_audio_exceeds_max_duration_with_shortening_warning:260:(self)::Test audio exceeding max_duration with shortening enabled raises warning.","test_audio_exceeds_max_duration_without_shortening_error:282:(self)::Test audio exceeding max_duration without shortening raises error.","test_max_duration_exceeds_breathing_cycle_warning:303:(self)::Test max_duration > breathing cycle duration raises warning.","test_narration_segment_no_timing_constraint:322:(self)::Test narration-only segments skip timing validation."]],"TestValidatorIntegration":["345",["test_valid_complete_script:348:(self, sample_narration_script)::Test complete valid script passes all validation.","test_multiple_errors_and_warnings:354:(self)::Test script with multiple validation issues."]]}],"t/test_models.py":["p",{"TestExerciseModel":["32",["test_valid_exercise:35:(self)::Test creating valid exercise with all fields.","test_exercise_minimal_fields:49:(self)::Test exercise with only required fields.","test_exercise_id_validation_alphanumeric:60:(self)::Test exercise ID must be alphanumeric with hyphens/underscores.","test_exercise_empty_id_raises_error:72:(self)::Test empty exercise ID raises validation error.","test_exercise_empty_title_raises_error:78:(self)::Test empty title raises validation error.","test_exercise_serialization:84:(self)::Test exercise can be serialized to dict."]],"TestAudioConfigModel":["101",["test_valid_audio_config:104:(self)::Test creating valid audio config.","test_audio_config_with_timing:113:(self)::Test audio config with timing parameter.","test_audio_config_empty_fragments_raises_error:122:(self)::Test empty fragments list raises validation error.","test_audio_config_invalid_timing_raises_error:128:(self)::Test invalid timing value raises validation error.","test_audio_config_zero_duration_raises_error:138:(self)::Test zero max_duration_ms raises validation error.","test_audio_config_negative_duration_raises_error:144:(self)::Test negative max_duration_ms raises validation error."]],"TestBreathingPatternModel":["156",["test_breathing_pattern_with_preset:159:(self)::Test creating breathing pattern with preset.","test_breathing_pattern_with_explicit_values:165:(self)::Test creating breathing pattern with explicit inhale/exhale.","test_breathing_pattern_with_holds:175:(self)::Test breathing pattern with hold periods.","test_breathing_pattern_with_duration:187:(self)::Test breathing pattern with total duration (natural breathing).","test_breathing_pattern_missing_both_raises_error:195:(self)::Test breathing pattern with neither preset nor explicit values raises error.","test_breathing_pattern_invalid_preset_raises_error:203:(self)::Test invalid preset pattern raises validation error.","test_breathing_pattern_zero_repetitions_raises_error:209:(self)::Test zero repetitions raises validation error."]],"TestSegmentModel":["223",["test_narration_segment:226:(self)::Test creating narration-type segment.","test_breathing_cycle_segment:237:(self)::Test creating breathing_cycle-type segment.","test_segment_empty_id_raises_error:250:(self)::Test empty segment ID raises validation error.","test_segment_invalid_type_raises_error:257:(self)::Test invalid segment type raises validation error.","test_breathing_cycle_without_breathing_raises_error:264:(self)::Test breathing_cycle segment without breathing pattern raises error."]],"TestVoiceConfigModel":["277",["test_valid_voice_config:280:(self)::Test creating valid voice config.","test_voice_config_minimal_fields:292:(self)::Test voice config with only required field.","test_voice_config_stability_range_validation:298:(self)::Test stability must be between 0 and 1.","test_voice_config_similarity_boost_range_validation:311:(self)::Test similarity_boost must be between 0 and 1."]],"TestNarrationScriptModel":["329",["test_valid_narration_script:337:(self, sample_exercise, sample_narration_segment, sample_voice_config,)::Test creating valid narration script.","test_narration_script_empty_segments_raises_error:351:(self, sample_exercise, sample_voice_config,)::Test empty segments list raises validation error.","test_narration_script_from_file:361:(self, sample_json_file)::Test loading narration script from JSON file.","test_narration_script_from_file_not_found:367:(self)::Test loading from non-existent file raises error.","test_narration_script_from_invalid_json:372:(self, invalid_json_file)::Test loading from malformed JSON raises JSONDecodeError.","test_narration_script_from_malformed_json:377:(self, malformed_json_file)::Test loading from malformed JSON raises error.","test_narration_script_estimate_duration:387:(self, sample_exercise, sample_breathing_segment, sample_voice_config,)::Test duration estimation for script.","test_narration_script_serialization:404:(self, sample_exercise, sample_narration_segment, sample_voice_config,)::Test narration script can be serialized to dict."]]}],"t/test_integration.py":["p",{"TestEndToEndWorkflow":["28",["test_complete_workflow_from_json_to_output:34:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test complete workflow: JSON \u2192 TTS \u2192 Audio \u2192 Metadata.","test_workflow_with_custom_output_directory:76:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test workflow with custom output directory.","test_workflow_preserves_script_structure:99:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test that output metadata preserves script structure."]],"TestCachingIntegration":["130",["test_cache_hit_on_second_generation:136:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test that caching is enabled when cache_dir is provided.","test_no_cache_when_cache_dir_none:165:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test that cache_dir=None disables caching."]],"TestErrorRecovery":["189",["test_handles_missing_input_file:192:(self, tmp_path, mock_env_vars)::Test graceful handling of missing input file.","test_handles_invalid_output_directory:202:(self, mock_client_class, simple_script_json, sample_audio, mock_env_vars)::Test handling of invalid output directory."]],"TestOutputValidation":["228",["test_output_directory_structure:234:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test that output directory has correct structure.","test_metadata_json_is_valid:264:(self, mock_client_class, simple_script_json, tmp_path, sample_audio, mock_env_vars)::Test that generated metadata JSON is valid."]]}],"t/test_api.py":["p",{"TestSuccessfulGeneration":["28",["test_generate_with_env_credentials:35:(self, mock_client_class, mock_generator_class, tmp_path, simple_script_json, mock_env_vars)::Test generation using environment variables for credentials.","test_generate_with_param_credentials:66:(self, mock_client_class, mock_generator_class, tmp_path, simple_script_json)::Test generation using function parameters for credentials.","test_generate_with_custom_output_dir:96:(self, mock_client_class, mock_generator_class, tmp_path, simple_script_json, mock_env_vars)::Test generation with custom output directory.","test_generate_with_cache_disabled:120:(self, mock_client_class, mock_generator_class, simple_script_json, mock_env_vars)::Test generation with caching disabled."]],"TestCredentialHandling":["138",["test_missing_api_key_raises_error:141:(self, simple_script_json, missing_env_vars)::Test missing API key raises ValueError.","test_missing_voice_id_raises_error:149:(self, simple_script_json_no_voice, missing_env_vars)::Test missing voice ID raises ValueError.","test_voice_id_from_json_takes_precedence_over_env:161:(self, mock_client_class, mock_generator_class, script_with_voice_json, mock_env_vars)::Test voice_id in JSON takes precedence over environment variable.","test_param_credentials_take_precedence:178:(self, mock_client_class, mock_generator_class, script_with_voice_json, mock_env_vars)::Test function parameters take precedence over JSON and env."]],"TestVoiceConfigIntegration":["201",["test_tts_client_uses_voice_config_from_script:208:(self, mock_client_class, mock_generator_class, simple_script_json, mock_env_vars)::Test TTS client is configured with voice settings from script."]],"TestAPIErrorHandling":["230",["test_nonexistent_file_raises_error:233:(self, mock_env_vars)::Test nonexistent input file raises FileNotFoundError.","test_invalid_json_raises_error:242:(self, mock_client_class, mock_generator_class, invalid_json_file, mock_env_vars)::Test invalid JSON raises appropriate error."]],"TestVerboseMode":["253",["test_verbose_mode_enables_logging:261:(self, mock_logging, mock_client_class, mock_generator_class, simple_script_json, mock_env_vars)::Test verbose=True enables logging configuration."]]}],"t/test_audio_processor.py":["p",{"TestRoundingFunctions":["9",["test_round_down_to_previous_second:12:(self)::","test_round_up_to_next_second:21:(self)::"]],"TestTrimAndPad":["32",["test_trim_to_whole_seconds:35:(self)::","test_trim_to_whole_seconds_already_whole:41:(self)::","test_pad_to_whole_seconds:47:(self)::","test_pad_to_whole_seconds_already_whole:53:(self)::","test_pad_to_whole_seconds_short_audio:59:(self)::"]],"TestStitch":["66",["test_stitch_single_segment:69:(self)::","test_stitch_multiple_segments:74:(self)::","test_stitch_with_gap:82:(self)::","test_stitch_empty_list_raises_error:90:(self)::"]],"TestDuration":["95",["test_get_duration_ms:98:(self)::","test_get_duration_seconds:102:(self)::"]],"TestSilence":["110",["test_create_silence:113:(self)::","test_create_silence_zero_duration:118:(self)::","test_create_silence_negative_raises_error:122:(self)::"]],"TestNormalize":["127",["test_normalize_volume:130:(self)::"]]}],"t/test_cli.py":["p",{"TestCLIArgumentParsing":["29",["test_basic_invocation:34:(self, mock_script_class, mock_generate, simple_script_json, capsys)::Test basic CLI invocation with minimal arguments.","test_custom_output_dir:61:(self, mock_script_class, mock_validator_class, simple_script_json, tmp_path)::Test --output-dir argument."]],"TestDryRunMode":["89",["test_dry_run_valid_script:94:(self, mock_validator_class, mock_script_class, simple_script_json, capsys)::Test dry-run with valid script.","test_dry_run_invalid_script:118:(self, mock_validator_class, mock_script_class, simple_script_json, capsys)::Test dry-run with invalid script.","test_dry_run_with_warnings:142:(self, mock_validator_class, mock_script_class, simple_script_json, capsys)::Test dry-run displays warnings."]],"TestCostEstimationMode":["170",["test_estimate_cost:174:(self, mock_script_class, simple_script_json, capsys)::Test cost estimation mode."]],"TestGenerationMode":["202",["test_generation_success:207:(self, mock_script_class, mock_generate, simple_script_json, capsys)::Test successful generation.","test_generation_with_no_cache:238:(self, mock_script_class, mock_generate, simple_script_json)::Test generation with --no-cache flag."]],"TestErrorHandling":["271",["test_file_not_found:274:(self, capsys)::Test FileNotFoundError handling.","test_validation_error:285:(self, mock_script_class, mock_generate, simple_script_json, capsys)::Test ValidationError handling.","test_tts_error:304:(self, mock_script_class, mock_generate, simple_script_json, capsys)::Test TTSError handling.","test_value_error:323:(self, mock_script_class, mock_generate, simple_script_json, capsys)::Test ValueError handling (configuration errors).","test_keyboard_interrupt:341:(self, mock_script_class, simple_script_json, capsys)::Test KeyboardInterrupt handling."]],"TestVerboseMode":["358",["test_verbose_flag_enables_logging:363:(self, mock_script_class, mock_logging, simple_script_json)::Test --verbose flag enables logging."]]}],"storage/filesystem.py":["p",{"FileSystemStorage":["28",["__init__:40:(self, base_dir:Union[str, Path] = \"audio_out\")::","create_exercise_dir:51:(self, exercise_id:str)>Path::","write_audio:73:(self, path:Union[str, Path], audio:AudioSegment, format:str = \"wav\")>Path::","write_json:102:(self, path:Union[str, Path], data:Any)>Path::","read_json:134:(self, path:Union[str, Path])>Any:exists:","exists:164:(self, path:Union[str, Path])>bool:exists:","list_files:176:(self, directory:Union[str, Path], pattern:str = \"*\")>list[Path]:exists:","get_exercise_dir:204:(self, exercise_id:str)>Path::","delete_exercise:216:(self, exercise_id:str)>None:exists,get_exercise_dir:"]]}],"storage/base.py":["p",{"Storage":["11",["create_exercise_dir:15:(self, exercise_id:str)>Path::","write_audio:31:(self, path:Union[str, Path], audio:AudioSegment, format:str = \"wav\")>Path::","write_json:49:(self, path:Union[str, Path], data:Any)>Path::","read_json:66:(self, path:Union[str, Path])>Any::","exists:83:(self, path:Union[str, Path])>bool::","list_files:96:(self, directory:Union[str, Path], pattern:str = \"*\")>list[Path]::"]]}],"processors/metadata.py":["p",{"MetadataBuilder":["24",["build_metadata:60:(cls, script:NarrationScript, segment_results:List[SegmentResult], exercise_dir:Path)>Dict[str, Any]:_build_breath_cycles,_build_segments_metadata:","_build_segments_metadata:86:(cls, segment_results:List[SegmentResult])>Dict[str, List[Dict[str, Any]]]::Build segment processing metadata.","_build_breath_cycles:116:(cls, script:NarrationScript, segment_results:List[SegmentResult], exercise_dir:Path)>List[Dict[str, Any]]:_create_breath_cycle:Build breath cycle definitions.","_create_breath_cycle:143:(cls, segment:Segment, segment_result:SegmentResult, exercise_dir:Path)>Dict[str, Any]:_create_breathing_guides,_create_voices_config:","_create_voices_config:180:(cls, segment_result:SegmentResult, exercise_dir:Path)>List[Dict[str, Any]]::","_create_breathing_guides:205:(cls, breathing:BreathingPattern)>List[Dict[str, Any]]:_find_closest_audio_guide:","_find_closest_audio_guide:248:(cls, duration_ms:int, audio_map:Dict[int, str])>Optional[str]::"]]}],"processors/audio.py":["p",{"AudioProcessor":["24",["round_down_to_previous_second:28:(ms:int)>int:round_down_to_previous_second:","round_up_to_next_second:47:(ms:int)>int:round_up_to_next_second:","trim_to_whole_seconds:66:(audio:AudioSegment)>AudioSegment:round_up_to_next_second:","pad_to_whole_seconds:91:(audio:AudioSegment)>AudioSegment:round_up_to_next_second:","trim_silence:120:(audio:AudioSegment, silence_threshold:float = -50.0, chunk_size:int = 10, keep_silence_ms:int = 100)>AudioSegment::","stitch:159:(segments:List[AudioSegment], gap_ms:int = 0, crossfade_ms:int = 0)>AudioSegment:stitch:","get_duration_ms:198:(audio:AudioSegment)>int::","get_duration_seconds:211:(audio:AudioSegment)>float::","create_silence:224:(duration_ms:int)>AudioSegment::","mix_with_background:248:(voice:AudioSegment, background:AudioSegment, voice_volume_db:float = 0, background_volume_db:float = -20)>AudioSegment::","normalize_volume:284:(audio:AudioSegment, target_dBFS:float = -20.0)>AudioSegment::"]]}],"htmlcov/jquery.tablesorter.min.js":["j",["benchmark:2:(s,d):log:","log:2:(s):log:","buildParserCache:2:(table,$headers):detectParserForColumn,getParserById,log:","detectParserForColumn:2:(table,node):getElementText:","getParserById:2:(name)::","buildCache:2:(table):benchmark,getElementText:","getElementText:2:(config,node)::","appendToTable:2:(table,cache):applyWidget,benchmark,setTimeout:","buildHeaders:2:(table):benchmark,checkHeaderMetadata,checkHeaderOptions,each,formatSortingOrder,log:","checkCellColSpan:2:(table,rows,row):checkCellColSpan:","checkHeaderMetadata:2:(cell)::","checkHeaderOptions:2:(table,i)::","applyWidget:2:(table):getWidgetById:","getWidgetById:2:(name)::","formatSortingOrder:2:(v)::","isValueInArray:2:(v,a)::","setHeadersCss:2:(table,$headers,list,css):each:","fixColumnWidth:2:(table,$headers):each:","updateHeaderSortCount:2:(table,sortList)::","multisort:2:(table,sortList,cache):benchmark,getCachedSortType:","sortText:2:(a,b)::","sortTextDesc:2:(a,b)::","sortNumeric:2:(a,b)::","sortNumericDesc:2:(a,b)::","getCachedSortType:2:(parsers,i)::","empty:2:()::"]],"htmlcov/jquery.min.js":["j",["r:2:(a)::","fb:2:(a,b,d,e):g,i,m,ob,qb:","gb:2:():b:","b:2:(c,e)::","hb:2:(a)::","ib:2:(a)::","jb:2:(a,b)::","kb:2:(a,b)::","lb:2:(a)::","mb:2:(a)::","nb:2:(a):hb:","ob:2:(a)::","pb:2:()::","qb:2:(a)::","rb:2:(a,b,c)::","sb:2:(a)::","tb:2:(a,b,c):fb:","ub:3:(a,b):ub:","vb:3:(a)::","wb:3:(a,b)::","xb:3:(a)::","w:2:(a,b,c):filter,grep:","D:2:(a,b)::","G:2:(a):each:","f:2:(b):each,f:","I:2:()::","J:2:():I:","e:2:():I,setTimeout:","O:2:(a,b,c)::","P:2:(a)::","Q:2:(a,b,d,e):extend:","R:3:(a,b,c):P,map:","ab:3:()::","bb:3:()::","cb:3:()::","db:3:(a)::","yb:3:(a)::","zb:3:(a,b)::","Ab:3:(a,b):add,extend:","Bb:3:(a,b):trim,xb,yb:","Eb:3:(b,c):m:","Fb:3:(a):Eb,m:","Lb:3:(a,b)::","i:3:()::","Ub:3:(a,b)::","Vb:3:(a,b):Fb:","Wb:3:(a,b,c)::","Xb:3:(a,b,c,d,e)::","Yb:3:(a,b,c):Xb:","Zb:3:(a,b,c,d,e)::","fc:4:():setTimeout:","gc:4:(a,b)::","hc:4:(a,b,c)::","ic:4:(a,b,c):Fb,always,done,hc,i,m,queue:","jc:4:(a,b)::","kc:4:(a,b,c):Deferred,always,done,extend,fc,jc,map:","Lc:4:(a)::","Mc:4:(a,b,c,d):each,g:","g:4:(h):each,g:","Nc:4:(a,b):extend:","Oc:4:(a,b,c)::","Pc:4:(a,b,c,d):g:","x:4:(a,b,c,d):Oc,Pc:","Vc:4:(a,b,c,d):Vc,each:","Zc:4:()::","dd:4:(a)::"]],"htmlcov/coverage_html_cb_6fb7b396.js":["j",["debounce:11:(callback, wait)::","checkVisible:21:(element)::","on_click:28:(sel, fn)::","getCellValue:36:(row, column = 0)::","rowComparator:50:(rowA, rowB, column = 0):getCellValue:","sortColumn:59:(th):forEach,rowComparator:","updateHeader:697:()::"]],"htmlcov/jquery.ba-throttle-debounce.min.js":["j",["g:9:():k,l:","l:9:()::","k:9:()::"]],"htmlcov/jquery.hotkeys.js":["j",["keyHandler:35:(handleObj)::"]]},"g":[["AudioGenerator.process_paragraph","AudioGenerator.shorten_text"],["NarrationValidator.validate","NarrationValidator._validate_segments"],["AudioGenerator.__init__","ensure_directory_exists"],["ValidationError.__init__","AirscriptEditorApp.__init__"],["ic","queue"],["AudioGenerator.process_metadata","lower_nospace"],["AudioGenerator.process_paragraph","AudioGenerator.pad_audio"],["f","each"],["kc","fc"],["NarrationScript.estimate_total_duration_ms","BreathingPattern.get_total_cycle_duration_ms"],["AirscriptEditorApp.__init__","FileSystemStorage.__init__"],["ElevenLabsClient.generate_audio","ElevenLabsClient._call_api_with_retry"],["TTSError.__init__","SegmentProcessingError.__init__"],["Vb","Fb"],["NarrationScript.estimate_total_duration_ms","get_total_cycle_duration_ms"],["AudioGenerator.process_section","process_paragraph"],["VoiceNarrationGenerator.generate","validate"],["AudioCache.get","_delete_entry"],["FileSystemStorage.delete_exercise","FileSystemStorage.get_exercise_dir"],["SegmentProcessingError.__init__","SegmentProcessingError.__init__"],["TTSError.__init__","ValidationError.__init__"],["appendToTable","benchmark"],["AudioGenerator.__init__","AudioGenerator.create_pedalboard"],["MetadataBuilder._build_breath_cycles","_create_breath_cycle"],["AudioGenerator.__init__","AudioGenerator.ensure_directory_exists"],["benchmark","log"],["FileSystemStorage.read_json","Storage.exists"],["FileSystemStorage.exists","exists"],["AirscriptEditorApp.create_buttons","load_json_files"],["ElevenLabsClient.generate_audio","_call_api_with_retry"],["AirscriptEditorApp.create_widgets","AirscriptEditorApp.update_data"],["AudioGenerator.load_and_print_presets","read_preset"],["AudioGenerator.load_and_print_presets","AudioGenerator.read_preset"],["AirscriptEditorApp.create_buttons","create_widgets"],["generate_narration","generate_narration"],["ElevenLabsClient.generate_audio","_get_voice_config_dict"],["ic","i"],["fixColumnWidth","each"],["AudioGenerator.__init__","create_exhale_audio_files_mapping"],["AudioGenerator.__init__","lower_nospace"],["VoiceNarrationGenerator.validate","NarrationValidator.validate"],["TTSError.__init__","VoiceNarrationGenerator.__init__"],["e","I"],["VoiceNarrationGenerator.validate","VoiceNarrationGenerator.validate"],["ValidationError.__init__","ElevenLabsClient.__init__"],["AudioCache.prune_expired","get"],["tb","fb"],["TTSError.__init__","AudioGenerator.__init__"],["SegmentProcessingError.__init__","VoiceNarrationGenerator.__init__"],["Fb","Eb"],["Vc","Vc"],["AirscriptEditorApp.__init__","SegmentProcessingError.__init__"],["VoiceNarrationGenerator.generate","VoiceNarrationGenerator._process_segment"],["Bb","trim"],["SegmentProcessingError.__init__","AudioGenerator.__init__"],["NarrationValidator.validate","_validate_exercise_duration"],["NarrationValidator.validate","_validate_segments"],["Pc","g"],["g","each"],["AirscriptEditorApp.__init__","ValidationError.__init__"],["rowComparator","getCellValue"],["SegmentProcessingError.__init__","FileSystemStorage.__init__"],["TTSError.__init__","__init__"],["Ab","add"],["AudioGenerator.process_metadata","save_metadata"],["VoiceNarrationGenerator.estimate_cost","VoiceNarrationGenerator.estimate_cost"],["AudioProcessor.trim_to_whole_seconds","round_up_to_next_second"],["ValidationError.__init__","AudioCache.__init__"],["AudioProcessor.round_up_to_next_second","AudioProcessor.round_up_to_next_second"],["main","trim_silence"],["AudioGenerator.process_metadata","AudioGenerator.process_section"],["SegmentProcessingError.__init__","__init__"],["AudioGenerator.process_metadata","AudioGenerator.create_breath_cycle"],["fb","m"],["AudioGenerator.load_and_print_presets","print_preset"],["Mc","g"],["FileSystemStorage.delete_exercise","FileSystemStorage.exists"],["AirscriptEditorApp.write_back_to_json","refresh_data_from_ui"],["Bb","xb"],["AirscriptEditorApp.create_buttons","AirscriptEditorApp.create_widgets"],["main","AudioProcessor.trim_silence"],["AudioGenerator.__init__","AudioGenerator.load_metadata"],["AudioGenerator.process_paragraph","lower_nospace"],["NarrationValidator._validate_segments","_validate_breathing_pattern"],["AirscriptEditorApp.__init__","VoiceNarrationGenerator.__init__"],["VoiceNarrationGenerator.generate","NarrationValidator.validate"],["AudioCache.prune_expired","AudioCache.get"],["AirscriptEditorApp.create_buttons","AirscriptEditorApp.load_json_files"],["AudioGenerator.process_paragraph","AudioGenerator.apply_effects_chain"],["ValidationError.__init__","NarrationValidator.__init__"],["FileSystemStorage.exists","Storage.exists"],["AirscriptEditorApp.__init__","AudioGenerator.__init__"],["AirscriptEditorApp.__init__","AirscriptEditorApp.create_buttons"],["buildParserCache","detectParserForColumn"],["ElevenLabsClient._call_api_with_retry","_call_api"],["ValidationError.__init__","TTSError.__init__"],["fb","qb"],["kc","Deferred"],["TestComponentIntegration.test_generate_calls_audio_processor_methods","stitch_spy"],["FileSystemStorage.list_files","FileSystemStorage.exists"],["ic","Fb"],["x","Oc"],["AirscriptEditorApp.__init__","__init__"],["AirscriptEditorApp.__init__","create_buttons"],["SegmentProcessingError.__init__","ValidationError.__init__"],["AudioGenerator.process_section","AudioGenerator.process_paragraph"],["VoiceNarrationGenerator.estimate_cost","ElevenLabsClient.estimate_cost"],["mock_tts_client","estimate_cost_side_effect"],["AudioGenerator.run","process_metadata"],["Nc","extend"],["AudioGenerator.__init__","AudioGenerator.create_exhale_audio_files_mapping"],["Bb","yb"],["fb","ob"],["buildCache","benchmark"],["VoiceNarrationGenerator.generate","_process_segment"],["TTSError.__init__","ElevenLabsClient.__init__"],["ElevenLabsClient.get_stats","ElevenLabsClient.get_stats"],["AudioCache.set","_compute_key"],["buildCache","getElementText"],["FileSystemStorage.read_json","FileSystemStorage.exists"],["buildParserCache","log"],["Vc","each"],["pad_to_nearest_second","round_up_to_next_second"],["kc","always"],["AudioProcessor.stitch","stitch"],["AudioProcessor.trim_to_whole_seconds","AudioProcessor.round_up_to_next_second"],["G","each"],["AudioCache.get","_compute_key"],["MetadataBuilder.build_metadata","MetadataBuilder._build_segments_metadata"],["main","AudioGenerator.run"],["FileSystemStorage.delete_exercise","exists"],["buildHeaders","benchmark"],["buildHeaders","checkHeaderOptions"],["MetadataBuilder.build_metadata","_build_segments_metadata"],["x","Pc"],["AirscriptEditorApp.undo_changes","create_widgets"],["AudioGenerator.process_metadata","create_breath_cycle"],["AudioGenerator.create_breath_cycle","AudioGenerator.lower_nospace"],["AirscriptEditorApp.create_widgets","update_data"],["ic","always"],["AudioCache.prune_expired","AudioCache._delete_entry"],["NarrationValidator.validate","NarrationValidator._validate_timing_feasibility"],["AirscriptEditorApp.__init__","load_json_files"],["AirscriptEditorApp.write_back_to_json","AirscriptEditorApp.refresh_data_from_ui"],["TTSError.__init__","NarrationValidator.__init__"],["AudioCache.get","get"],["AirscriptEditorApp.__init__","create_widgets"],["AirscriptEditorApp.__init__","ElevenLabsClient.__init__"],["w","grep"],["AirscriptEditorApp.refresh_data_from_ui","AirscriptEditorApp.update_data"],["TTSError.__init__","AirscriptEditorApp.__init__"],["AudioProcessor.pad_to_whole_seconds","round_up_to_next_second"],["ElevenLabsClient.get_stats","AudioCache.get_stats"],["TTSError.__init__","TTSError.__init__"],["AudioProcessor.round_down_to_previous_second","round_down_to_previous_second"],["FileSystemStorage.list_files","exists"],["MetadataBuilder._create_breathing_guides","_find_closest_audio_guide"],["ic","hc"],["SegmentProcessingError.__init__","AirscriptEditorApp.__init__"],["MetadataBuilder.build_metadata","_build_breath_cycles"],["ic","m"],["AudioGenerator.load_and_print_presets","set_parameters"],["log","log"],["gb","b"],["fc","setTimeout"],["FileSystemStorage.delete_exercise","get_exercise_dir"],["MetadataBuilder._create_breath_cycle","_create_breathing_guides"],["MetadataBuilder._create_breath_cycle","_create_voices_config"],["buildHeaders","formatSortingOrder"],["NarrationValidator._validate_segments","NarrationValidator._validate_breathing_pattern"],["R","map"],["AudioGenerator.__init__","create_inhale_audio_files_mapping"],["AudioGenerator.process_metadata","generate_requirements_document"],["buildHeaders","checkHeaderMetadata"],["main","run"],["kc","jc"],["AirscriptEditorApp.undo_changes","AirscriptEditorApp.create_widgets"],["g","g"],["ValidationError.__init__","VoiceNarrationGenerator.__init__"],["AudioGenerator.process_paragraph","AudioGenerator.generate_and_process_audio"],["AudioCache.get","AudioCache.get"],["FileSystemStorage.read_json","exists"],["buildHeaders","each"],["checkCellColSpan","checkCellColSpan"],["AirscriptEditorApp.__init__","NarrationValidator.__init__"],["ValidationError.__init__","AudioGenerator.__init__"],["MetadataBuilder.build_metadata","MetadataBuilder._build_breath_cycles"],["w","filter"],["AudioGenerator.process_metadata","AudioGenerator.generate_requirements_document"],["FileSystemStorage.delete_exercise","Storage.exists"],["AirscriptEditorApp.refresh_data_from_ui","update_data"],["AudioGenerator.__init__","AudioGenerator.create_inhale_audio_files_mapping"],["AirscriptEditorApp.__init__","AirscriptEditorApp.__init__"],["AirscriptEditorApp.__init__","AirscriptEditorApp.create_widgets"],["AirscriptEditorApp.__init__","TTSError.__init__"],["appendToTable","setTimeout"],["ValidationError.__init__","FileSystemStorage.__init__"],["MetadataBuilder._build_breath_cycles","MetadataBuilder._create_breath_cycle"],["AudioGenerator.load_and_print_presets","AudioGenerator.print_preset"],["SegmentProcessingError.__init__","ElevenLabsClient.__init__"],["buildParserCache","getParserById"],["AudioCache.prune_expired","_delete_entry"],["AudioCache.set","AudioCache._compute_key"],["NarrationValidator._validate_segments","NarrationValidator._validate_audio_config"],["ValidationError.__init__","__init__"],["TestComponentIntegration.test_generate_calls_audio_processor_methods","TestComponentIntegration.stitch_spy"],["ElevenLabsClient.generate_audio","ElevenLabsClient._get_voice_config_dict"],["AudioGenerator.process_paragraph","generate_and_process_audio"],["AirscriptEditorApp.save_to_excel","refresh_data_from_ui"],["AudioProcessor.round_up_to_next_second","round_up_to_next_second"],["MetadataBuilder._create_breathing_guides","MetadataBuilder._find_closest_audio_guide"],["e","setTimeout"],["ElevenLabsClient._call_api_with_retry","ElevenLabsClient._call_api"],["AudioGenerator.process_metadata","AudioGenerator.lower_nospace"],["TTSError.__init__","AudioCache.__init__"],["Yb","Xb"],["mock_tts_client_with_stats","generate_side_effect"],["FileSystemStorage.list_files","Storage.exists"],["Ab","extend"],["SegmentProcessingError.__init__","AudioCache.__init__"],["AudioCache.get","AudioCache._compute_key"],["multisort","benchmark"],["f","f"],["NarrationValidator._validate_segments","_validate_audio_config"],["AudioGenerator.run","AudioGenerator.process_metadata"],["AudioGenerator.process_metadata","process_section"],["appendToTable","applyWidget"],["applyWidget","getWidgetById"],["AudioProcessor.pad_to_whole_seconds","AudioProcessor.round_up_to_next_second"],["kc","done"],["NarrationValidator.validate","NarrationValidator._validate_exercise_duration"],["fb","i"],["ValidationError.__init__","SegmentProcessingError.__init__"],["Mc","each"],["AudioGenerator.create_breath_cycle","lower_nospace"],["SegmentProcessingError.__init__","NarrationValidator.__init__"],["AudioGenerator.process_metadata","AudioGenerator.save_metadata"],["AudioGenerator.__init__","load_metadata"],["ValidationError.__init__","ValidationError.__init__"],["SegmentProcessingError.__init__","TTSError.__init__"],["VoiceNarrationGenerator.estimate_cost","TTSClient.estimate_cost"],["AudioCache.clear","AudioCache._delete_entry"],["AudioGenerator.__init__","AudioGenerator.lower_nospace"],["ic","done"],["AirscriptEditorApp.__init__","AudioCache.__init__"],["FileSystemStorage.exists","FileSystemStorage.exists"],["setHeadersCss","each"],["sortColumn","forEach"],["g","l"],["AudioGenerator.process_paragraph","apply_effects_chain"],["detectParserForColumn","getElementText"],["NarrationValidator.validate","_validate_timing_feasibility"],["AudioCache.get","AudioCache._delete_entry"],["VoiceNarrationGenerator.estimate_cost","estimate_cost"],["buildHeaders","log"],["Fb","m"],["ub","ub"],["AudioGenerator.load_and_print_presets","AudioGenerator.set_parameters"],["AudioProcessor.round_down_to_previous_second","AudioProcessor.round_down_to_previous_second"],["Eb","m"],["sortColumn","rowComparator"],["TTSError.__init__","FileSystemStorage.__init__"],["R","P"],["VoiceNarrationGenerator.validate","validate"],["pad_to_nearest_second","AudioProcessor.round_up_to_next_second"],["AudioGenerator.process_paragraph","pad_audio"],["ElevenLabsClient.get_stats","get_stats"],["AirscriptEditorApp.__init__","AirscriptEditorApp.load_json_files"],["AudioGenerator.process_paragraph","AudioGenerator.lower_nospace"],["AudioGenerator.__init__","create_pedalboard"],["MetadataBuilder._create_breath_cycle","MetadataBuilder._create_voices_config"],["nb","hb"],["AudioProcessor.stitch","AudioProcessor.stitch"],["multisort","getCachedSortType"],["kc","extend"],["g","k"],["kc","map"],["AirscriptEditorApp.save_to_excel","AirscriptEditorApp.refresh_data_from_ui"],["Q","extend"],["fb","g"],["AudioGenerator.process_paragraph","shorten_text"],["J","I"],["MetadataBuilder._create_breath_cycle","MetadataBuilder._create_breathing_guides"],["VoiceNarrationGenerator.generate","VoiceNarrationGenerator.validate"],["AudioCache.clear","_delete_entry"]],"d":{"IMPLEMENTATION_COMPLETE.md":["Voice Generation Library - Implementation Complete \u2705","Overview","What Was Built","Core Architecture (13 Modules, ~3500 LOC)","Key Features","\u2705 Dual-Mode Interface","\u2705 Clean Architecture","\u2705 Robust Error Handling","\u2705 Cost-Optimized","\u2705 Type-Safe & Validated"],"REFACTORING_PROGRESS.md":["Voice Generation Library Refactoring Progress","\u2705 Completed (Phase 1: Core Infrastructure)","Directory Structure","Implemented Components","\ud83d\udea7 In Progress (Phase 2: Orchestration Layer)","Next Steps (Priority Order)","\ud83d\udccb Remaining Work (Phase 3: Testing & Documentation)","Testing","Documentation","Cleanup"],"TESTING_GUIDE.md":["Testing Guide","Prerequisites","1. Install Dependencies","Activate conda environment (if using conda)","Install development dependencies","Install core dependencies (if not already installed)","2. Set Up Credentials","3. Verify FFmpeg","Should show FFmpeg version info","Automated Tests"],"README.md":["Voice Generation Library","Features","Installation","Prerequisites","Install Dependencies","Using conda (recommended for audio processing)","Install Python dependencies","Environment Variables","Quick Start","CLI Usage"],"TESTING_PROGRESS.md":["Testing Progress Report","Overview","Completed Test Groups \u2705","Group 1: Audio Processor Tests (17 tests) \u2705","Group 2: Data Models Tests (36 tests) \u2705","Pending Test Groups \u23f3","Group 3: Validator Tests (20 tests)","Group 4: Storage Layer Tests (15 tests)","Group 5: TTS Client Tests (20 tests)","Group 6: Metadata Builder Tests (15 tests)"],"TEST_COVERAGE_SUMMARY.md":["Test Coverage Summary","Overall Coverage","Coverage by Module","Legacy Files (Not Tested)","Test Groups Summary","\u2705 Group 1: Audio Processor Tests (17 tests, 77.78% coverage)","\u2705 Group 2: Data Models Tests (36 tests, 90.43% coverage)","\u2705 Group 3: Validator Tests (18 tests, 96.12% coverage)","\u2705 Group 4: Storage Layer Tests (22 tests, 88.76% coverage)","\u2705 Group 5: TTS Client Tests (19 tests, 85.09% coverage)"],"CLAUDE.md":["CLAUDE.md","Project Overview","Core Workflow","Environment Setup","Conda Environment","Create environment from existing conda exports","(Note: environment.yml not in repo, but can be recreated from exports)","Install core dependencies","Install pip dependencies","Environment Variables"],"QUICK_START.md":["Quick Start Guide","Installation (5 minutes)","Install dependencies","Set credentials","Test Without API Calls (30 seconds)","Validate JSON schema","Estimate costs","Test Python imports","Generate Audio (2 minutes + API time)","Generate voice narration"]},"deps":{"trim_audio.py":["os","argparse","math","pydub","pydub.utils","pydub.silence","logging"],"narration_generator.py":["os","requests","pydub","io","pathlib","json","pedalboard","pedalboard.io","openai","logging","dotenv"],"airscript_editor.py":["json","os","pandas","customtkinter"],"api.py":["os","logging","pathlib","typing","voice_generation.clients.elevenlabs","voice_generation.core.generator","voice_generation.core.models","voice_generation.core.results","voice_generation.storage.filesystem"],"trim_audio_utils.py":["pydub","math"],"parse_xml_preset.py":["os","requests","pydub","io","pathlib","json","pedalboard","pedalboard.io","openai","logging","dotenv"],"__main__.py":["sys","argparse","logging","pathlib","voice_generation","voice_generation.core.exceptions","voice_generation.core.generator","voice_generation.core.models","voice_generation.core.validator","voice_generation.storage.filesystem","traceback","voice_generation.clients.elevenlabs"],"clients/cache.py":["hashlib","json","logging","time","pathlib","typing","pydub","voice_generation.core.exceptions"],"clients/elevenlabs.py":["io","logging","time","pathlib","typing","requests","pydub","voice_generation.clients.base","voice_generation.clients.cache","voice_generation.core.exceptions"],"clients/base.py":["abc","typing","pydub"],"core/validator.py":["logging","typing","voice_generation.core.models","voice_generation.core.results"],"core/models.py":["json","pathlib","typing","pydantic"],"core/results.py":["dataclasses","pathlib","typing"],"core/generator.py":["logging","pathlib","typing","pydub","voice_generation.clients.base","voice_generation.core.exceptions","voice_generation.core.models","voice_generation.core.results","voice_generation.core.validator","voice_generation.processors.audio","voice_generation.processors.metadata","voice_generation.storage.base"],"core/exceptions.py":["typing"],"tests/conftest.py":["json","tempfile","pathlib","typing","unittest.mock","pytest","pydub","voice_generation.core.models","voice_generation.clients.base","voice_generation.storage.filesystem","voice_generation.core.generator"],"tests/test_generator.py":["pytest","pathlib","unittest.mock","pydub","voice_generation.core.generator","voice_generation.core.models","voice_generation.core.exceptions","voice_generation.core.results","voice_generation.processors.audio","voice_generation.core.validator"],"tests/test_metadata.py":["pytest","pathlib","voice_generation.processors.metadata","voice_generation.core.models","voice_generation.core.results"],"tests/test_tts_client.py":["pytest","unittest.mock","pathlib","io","pydub","requests","voice_generation.clients.elevenlabs","voice_generation.clients.cache","voice_generation.core.exceptions"],"tests/test_storage.py":["json","pytest","pathlib","pydub","voice_generation.storage.filesystem","voice_generation.core.exceptions"],"tests/test_validator.py":["pytest","voice_generation.core.validator","voice_generation.core.models"],"tests/test_models.py":["json","pytest","pathlib","pydantic","voice_generation.core.models"],"tests/test_integration.py":["pytest","json","pathlib","unittest.mock","voice_generation","voice_generation.core.models","voice_generation.core.results","pydub"],"tests/test_api.py":["pytest","pathlib","unittest.mock","voice_generation.api","voice_generation.core.models","voice_generation.core.results"],"tests/test_audio_processor.py":["pytest","pydub","voice_generation.processors.audio","pydub.generators"],"tests/test_cli.py":["pytest","sys","pathlib","unittest.mock","io","voice_generation.__main__","voice_generation.core.exceptions","voice_generation.core.results"],"storage/filesystem.py":["json","logging","pathlib","typing","pydub","voice_generation.storage.base","voice_generation.core.exceptions","shutil"],"storage/base.py":["json","abc","pathlib","typing","pydub"],"processors/metadata.py":["logging","pathlib","typing","voice_generation.core.models","voice_generation.core.results"],"processors/audio.py":["math","logging","typing","pydub","pydub.silence"]},"dir_purposes":{"core":"Data models and schemas","tests":"Test files and test utilities","utils":"Shared utility functions and helpers","narration_scripts":"Build and utility scripts","htmlcov":"Data models and schemas"},"staleness":1760811275.034078}