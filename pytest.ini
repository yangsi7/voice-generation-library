[pytest]
# ============================================================================
# Pytest Configuration for Voice Generation Library
# ============================================================================

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts =
    # Verbosity and output
    --verbose
    --tb=short
    --strict-markers

    # Coverage reporting
    --cov=voice_generation
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=85

    # Test execution
    --strict-config
    -ra

# Markers for organizing tests
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (may involve multiple components)
    slow: Slow tests (> 1 second)
    requires_api: Tests that require external API access (ElevenLabs)
    requires_ffmpeg: Tests that require FFmpeg to be installed

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage options
[coverage:run]
source = voice_generation
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */.*
    */venv/*
    */virtualenv/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    # Standard pragmas
    pragma: no cover

    # Defensive programming
    raise AssertionError
    raise NotImplementedError

    # Type checking
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:

    # Debugging
    def __repr__
    def __str__

    # Abstract methods
    @abstractmethod
    @abc.abstractmethod

    # Non-runnable code
    if __name__ == .__main__.:
    if 0:
    if False:

[coverage:html]
directory = htmlcov
